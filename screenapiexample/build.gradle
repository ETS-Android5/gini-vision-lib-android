apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "net.gini.android.vision.screenapiexample"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode buildNumber == 'DEBUG' ? 1 : buildNumber.toInteger()
        versionName "${version} (${buildNumber})"
    }

    signingConfigs {
        release {
            storeFile file(releaseKeystoreFile)
            storePassword releaseKeystorePassword
            keyAlias releaseKeyAlias
            keyPassword releaseKeyPassword
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
}

// For testing a released version
repositories {
    maven {
        url 'https://repo.i.gini.net/nexus/content/repositories/releases'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile deps.appCompatv7

    compile 'com.github.tony19:logback-android-core:1.1.1-5'
    compile 'com.github.tony19:logback-android-classic:1.1.1-5'

    compile('net.gini:gini-android-sdk:1.1.47@aar') {
        transitive = true
    }

    testCompile deps.junit

    // For testing the local version
    compile project(path: ':ginivision')
    // For testing a released version
    //compile 'net.gini:gini-vision-lib:2.0.0-stub.1'
}

apply from: rootProject.file('gradle/codequality.gradle')

import groovy.xml.StreamingMarkupBuilder

task insertClientCredentials {
    String newClientId
    String newClientSecret

    if (project.hasProperty('clientId')) {
        newClientId = clientId
    }
    if (project.hasProperty('clientSecret')) {
        newClientSecret = clientSecret
    }

    if (newClientId == null || newClientSecret == null) {
        File propertiesFile = file('local.properties')
        if (propertiesFile.exists()) {
            Properties properties = new Properties()
            propertiesFile.withInputStream { instr ->
                properties.load(instr)
            }
            if (newClientId == null) {
                newClientId = properties.get("clientId")
            }
            if (newClientSecret == null) {
                newClientSecret = properties.get("clientSecret")
            }

            if (newClientId == null) {
                throw new IllegalStateException("Missing clientId from ${projectDir}/local.properties.\nHint: Either create a ${projectDir}/local.properties file with clientId and clientSecret properties or pass them in as parameters with -PclientId and -PclientSecret.")
            }
            if (newClientSecret == null) {
                throw new IllegalStateException("Missing clientSecret from ${projectDir}/local.properties.\nHint: Either create a ${projectDir}/local.properties file with clientId and clientSecret properties or pass them in as parameters with -PclientId and -PclientSecret.")
            }
        } else {
            if (newClientId == null) {
                throw new IllegalStateException("Missing clientId property. Set it with -PclientId.\nHint: Either create a ${projectDir}/local.properties file with clientId and clientSecret properties or pass them in as parameters with -PclientId and -PclientSecret.")
            }
            if (newClientSecret == null) {
                throw new IllegalStateException("Missing clientSecret property. Set it with -PclientSecret.\nHint: Either create a ${projectDir}/local.properties file with clientId and clientSecret properties or pass them in as parameters with -PclientId and -PclientSecret.")
            }
        }
    }

    File credentialsFile = file('src/main/res/values/gini_api_credentials.xml')

    def resources = new XmlSlurper().parseText(credentialsFile.text)
    def clientIdStringRes = resources.'*'.find { resource ->
        resource.name() == 'string' && resource.@name == 'gini_api_client_id'
    }
    def clientSecretStringRes = resources.'*'.find { resource ->
        resource.name() == 'string' && resource.@name == 'gini_api_client_secret'
    }

    clientIdStringRes.replaceNode {
        string(name: 'gini_api_client_id', newClientId)
    }
    clientSecretStringRes.replaceNode {
        string(name: 'gini_api_client_secret', newClientSecret)
    }

    credentialsFile.text = new StreamingMarkupBuilder().bind {
        mkp.xmlDeclaration(version: '1.0', encoding: 'utf-8')
        mkp.yield resources
    }.toString()
}
