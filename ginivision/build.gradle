apply plugin: 'com.android.library'
apply plugin: 'jacoco-android'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        // Use the test runner with JUnit4 support
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            testCoverageEnabled = true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // Fix for DuplicateFileException when using Espresso (https://code.google.com/p/android/issues/detail?id=195331)
    packagingOptions {
        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
    }

    // Fix for androidTest builds due to Play Services Vision and Espresso creating their own protobuf.meta files
    packagingOptions {
        pickFirst 'protobuf.meta'
    }
}

dependencies {
    api deps.slf4j
    api deps.appCompatv7
    api deps.supportv4
    api deps.supportv13
    api deps.supportDesign
    api deps.playServicesVision

    implementation deps.commonsImaging
    implementation deps.completableFuture
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation fileTree(dir: '${project.rootDir}/tools/doccheck-doclet', include: ['*.jar'])
    implementation deps.supportCardView

    testImplementation deps.junit
    testImplementation deps.truth
    testImplementation deps.mockito

    androidTestImplementation deps.supportTestRunner
    androidTestImplementation deps.truth
    androidTestImplementation deps.supportTestRules
    androidTestImplementation deps.supportTestEspressoCore
    androidTestImplementation deps.supportTestEspressoIntents
    androidTestImplementation deps.supportTestUiAutomator
    androidTestImplementation deps.mockito
    androidTestImplementation deps.mockitoAndroid
    androidTestImplementation deps.supportMultidex
}

apply from: rootProject.file('gradle/codequality.gradle')
apply from: rootProject.file('gradle/maven.gradle')
apply from: rootProject.file('gradle/javadoc_coverage.gradle')
apply from: rootProject.file('gradle/multidex_for_tests.gradle')
apply from: rootProject.file('gradle/targeted_android_tests.gradle')

task generateJavadoc(type: GenerateJavadoc) {
    projectTitle = "Gini Vision Library for Android"
}

task sourcesJar(type: Jar, dependsOn: 'assembleRelease') {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task javadocJar(type: Jar, dependsOn: generateJavadoc) {
    classifier = 'javadoc'
    from destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

task unifyConnectedTestCoverage {
    description = "Adds the connected tests' coverage to the JacocoReport tasks."
    doLast {
        unifyTestCoverage("${buildDir}/outputs/code-coverage/connected")
    }
}

task unifyTargetedTestCoverage {
    description = "Adds the connected tests' coverage to the JacocoReport tasks."
    doLast {
        unifyTestCoverage("${buildDir}/outputs/code-coverage/targeted")
    }
}

def unifyTestCoverage(coverageFilesPath) {
    tasks.withType(JacocoReport) { task ->
        File execDataDir = file(coverageFilesPath)
        if (execDataDir.exists() && execDataDir.isDirectory() && execDataDir.listFiles().length > 0) {
            File[] execDataDirContents = execDataDir.listFiles();
            task.executionData = task.executionData.plus(files { execDataDirContents })
        }
    }
}